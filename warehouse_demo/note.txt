add field lbje to mechanism
pass lbje to shouldEventBeEnqued??
update accordingly if enqued??
mechanism protocol should know of branching and joining events as well...?


is this too invasive in machine runner better if just done as part of extended machine business logic??



Argument of type '(a: any, b: any, c: any) => void' is not assignable to parameter of type
'ReactionHandler<[ActyxEvent<MachineEvent<"partID", PartIDPayload>>], ReactionContext<{ id: string; }>, void>'.

'ReactionHandler<[ActyxEvent<>], ReactionContext<{ id: string; }>, void>'.

T set of event types
lbje: e --> e
branches : event type -->  powerset(T)
branchesFromMachineState: machineState * event type --> powerset(T)
	branchesFromMachineState should be computed once. 
	do it in rust code bc. that is easier right now with graph traversal. 
	do a dfs, breaking when u encounter a branching/joining event type

	Given a machine M, a set of event types T and a set of Tspecial:
		map  = {}
		for s in M:
			for t in T:
				if s has outgoing reaction with label t to node s':
					map[(s, t)] = {t}
					do dfs from s' stopping each path when u encounter a t' in Tspecial
					add all t's encountered to map[(s, t)]
				else:
					map[(s, t)] = {}

later, when running machine, and receiving an event e of type t in Tspecial the idea is to go: 
	ts = branchesFromMachineState[currentState, t]
	for all t in ts: lbje[t] = e

